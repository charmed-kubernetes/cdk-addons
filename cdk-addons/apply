#!/usr/bin/python3

import os
import shutil
import subprocess
import yaml
from jinja2 import Template

template_dir = os.path.join(os.environ["SNAP"], "templates")
addon_dir = os.path.join(os.environ["SNAP_USER_DATA"], "addons")

def main():
    if render_templates():
        apply_addons()
    else:
        remove_all_addons()

def render_templates():
    shutil.rmtree(addon_dir, ignore_errors=True)
    os.mkdir(addon_dir)
    node_count = get_node_count()
    context = {
        "arch": get_snap_config("arch"),
        "pillar": {
            "dns_domain": get_snap_config("dns-domain"),
            "num_nodes": node_count
        },
        # nanny_memory for heapster
        # formula from https://github.com/kubernetes/kubernetes/blob/v1.9.6/cluster/addons/cluster-monitoring/influxdb/heapster-controller.yaml#L11
        "nanny_memory": str(90 * 1024 + node_count * 200) + "Ki"
    }

    registry = get_snap_config("registry", required=False)
    if registry:
        context["registry"] = registry

    rendered = False
    if get_snap_config("enable-kube-dns") == "true":
        render_template("kube-dns.yaml", context)
        rendered = True
    if get_snap_config("enable-dashboard") == "true":
        render_template("kubernetes-dashboard.yaml", context)
        render_template("influxdb-grafana-controller.yaml", context)
        render_template("influxdb-service.yaml", context)
        render_template("grafana-service.yaml", context)
        render_template("heapster-rbac.yaml", context)
        render_template("heapster-controller.yaml", context)
        render_template("heapster-service.yaml", context)
        rendered = True
    if get_snap_config("enable-gpu", required=False) == "true":
        render_template("nvidia-device-plugin.yml", context)
        rendered = True
    if get_snap_config("enable-metrics", required=False) == "true":
        render_template("auth-delegator.yaml", context)
        render_template("auth-reader.yaml", context)
        render_template("metrics-apiservice.yaml", context)
        render_template("metrics-server-deployment.yaml", context)
        render_template("metrics-server-service.yaml", context)
        render_template("resource-reader.yaml", context)
        rendered = True
    if get_snap_config("enable-ceph", required=False) == "true":
        ceph_context = context.copy()
        default_storage = get_snap_config("default-storage", required=True)
        ceph_context['admin_key'] = get_snap_config(
            "ceph-admin-key", required=True)
        ceph_context['kubernetes_key'] = get_snap_config(
            "ceph-kubernetes-key", required=True)
        ceph_context['mon_hosts'] = get_snap_config(
            "ceph-mon-hosts", required=True)

        render_template("rbd-secrets.yaml", ceph_context)
        render_template("rbdplugin.yaml", ceph_context)
        render_template("csi-provisioner.yaml", ceph_context)
        render_template("csi-attacher.yaml", ceph_context)

        ext4_context = ceph_context.copy()
        if default_storage == 'ceph-ext4':
            ext4_context['default'] = True
        else:
            ext4_context['default'] = False
        ext4_context['pool_name'] = 'ext4-pool'
        ext4_context['fs_type'] = 'ext4'
        ext4_context['sc_name'] = 'ceph-ext4'
        render_template("rbd-storage-class.yaml", ext4_context,
                        render_filename="ceph-ext4-storage-class.yaml")

        xfs_context = ceph_context.copy()
        if (default_storage == 'ceph-xfs' or
                default_storage == 'auto'):
            xfs_context['default'] = True
        else:
            xfs_context['default'] = False
        xfs_context['pool_name'] = 'xfs-pool'
        xfs_context['fs_type'] = 'xfs'
        xfs_context['sc_name'] = 'ceph-xfs'
        render_template("rbd-storage-class.yaml", xfs_context,
                        render_filename="ceph-xfs-storage-class.yaml")

    return rendered

def render_template(file, context, required=True, render_filename=None):
    source = os.path.join(template_dir, file)
    if render_filename is None:
        dest = os.path.join(addon_dir, file)
    else:
        dest = os.path.join(addon_dir, render_filename)
    if not os.path.exists(source) and not required:
        return
    with open(source) as f:
        template = Template(f.read())
    content = template.render(context)

    # apply cdk-addons=true label
    data = [part for part in yaml.load_all(content) if part]
    for part in data:
        part["metadata"].setdefault("labels", {})
        part["metadata"]["labels"]["cdk-addons"] = "true"
        # Adding kubernetes.io/cluster-service=true label for now. We should
        # probably remove this later and stop using it after the
        # cdk-addons=true label has been live for a couple releases.
        part["metadata"]["labels"]["kubernetes.io/cluster-service"] = "true"
    content = yaml.dump_all(data)

    with open(dest, "w") as f:
        f.write(content)

def apply_addons():
    # Apply dns service first and then recursively the rest.
    if get_snap_config("enable-kube-dns") == "true":
        dns_svc = os.path.join(addon_dir, "kube-dns.yaml")
        args = ["apply",
                "-f", dns_svc,
                "-l", "cdk-addons=true",
                "--force"]
        kubectl(*args)
    args = ["apply",
            "-f", addon_dir,
            "--recursive",
            "-l", "cdk-addons=true",
            "--prune=true",
            "--force"]
    kubectl(*args)

def remove_all_addons():
    args = ["delete",
            "apiservices,"
            "clusterroles,"
            "clusterrolebindings,"
            "configmaps,"
            "deployments,"
            "roles,"
            "rolebindings,"
            "secrets,"
            "services,"
            "serviceaccounts",
            "-l",
            "kubernetes.io/cluster-service=true",
            "--force"]
    kubectl(*args)

def kubectl(*args):
    cmd = [os.path.join(os.environ["SNAP"], "kubectl")]
    kubeconfig = get_snap_config("kubeconfig", required=False)
    if kubeconfig:
        cmd += ["--kubeconfig", kubeconfig]
    cmd += list(args)
    return subprocess.check_output(cmd)

def get_node_count():
    '''Return the number of Kubernetes nodes in the cluster'''
    output = kubectl("get", "nodes", "-o", "name")
    node_count = len(output.splitlines())
    return node_count

def get_snap_config(name, required=True):
    path = os.path.join(os.environ["SNAP_DATA"], "config", name)
    with open(path) as f:
        value = f.read().rstrip()
    if not value and required:
        raise MissingSnapConfig("%s is required" % name)
    return value

class MissingSnapConfig(Exception):
    pass

if __name__ == "__main__":
    main()
