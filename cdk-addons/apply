#!/usr/bin/python3

import json
import os
import shutil
import subprocess
import traceback
import yaml
import base64
from pathlib import Path

from jinja2 import Template

template_dir = os.path.join(os.environ["SNAP"], "templates")
addon_dir = os.path.join(os.environ["SNAP_USER_DATA"], "addons")
dns_providers = {
    'core-dns': 'core-dns.yaml',
    'kube-dns': 'kube-dns.yaml'
}

# Known registries that do not support multi-arch image manifests.
single_arch_registries = [
    'image-registry.canonical.com',
    'rocks.canonical.com',
]

def main():
    if render_templates():
        apply_addons()
    prune_addons()

def render_templates():
    shutil.rmtree(addon_dir, ignore_errors=True)
    os.mkdir(addon_dir)
    node_count = get_node_count()
    context = {
        "arch": get_snap_config("arch"),
        "pillar": {
            "dns_domain": get_snap_config("dns-domain"),
            "num_nodes": node_count,
            "dns_memory_limit": "170Mi"
        },
        # nanny_memory for heapster
        # formula from https://github.com/kubernetes/kubernetes/blob/v1.9.6/cluster/addons/cluster-monitoring/influxdb/heapster-controller.yaml#L11
        "nanny_memory": str(90 * 1024 + node_count * 200) + "Ki",
        # heapster server information taken from https://github.com/kubernetes/kubernetes/blob/8bd0a306b599bc8511a238c8c69c03c729767350/cluster/gce/gci/configure-helper.sh#L2349
        "base_metrics_cpu": "80m",
        "metrics_cpu_per_node": "0.5",
        "base_metrics_memory": "140Mi",
        "metrics_memory_per_node": "4",
        "heapster_min_cluster_size": "16",

        # metrics server information taken from https://github.com/kubernetes/kubernetes/blob/8bd0a306b599bc8511a238c8c69c03c729767350/cluster/gce/gci/configure-helper.sh#L2402
        "base_metrics_server_cpu": "40m",
        "base_metrics_server_memory": "40Mi",
        "metrics_server_memory_per_node": "4",
        "metrics_server_min_cluster_size": "16",
        "monitorstorage": get_snap_config("monitorstorage"),

        # may need to hack image names if our registry doesn't support multi-arch images
        "multiarch_workaround": "",

        # let addons know what we're calling our cluster
        "cluster_tag": get_snap_config("cluster-tag", required=False),
    }

    registry = get_snap_config("registry", required=False)
    if registry:
        context["registry"] = registry

        for arch_reg in single_arch_registries:
            if arch_reg in registry:
                context["multiarch_workaround"] = "-{}".format(context["arch"])
                break

    rendered = False
    dns_provider = get_snap_config("dns-provider")
    if dns_provider in dns_providers:
        render_template(dns_providers[dns_provider], context)
        rendered = True
    if get_snap_config("enable-dashboard") == "true":
        dash_context = context.copy()
        dash_context['dashboard_auth'] = get_snap_config(
            "dashboard-auth", required=False)
        if not dash_context['dashboard_auth']:
            # default to basic auth as it used to be hard-coded
            dash_context['dashboard_auth'] = 'basic'
        render_template("kubernetes-dashboard.yaml", dash_context)
        # monitorstorage
        dash_ig_context = dash_context.copy()
        dash_ig_context['monitorstorage'] = list(yaml.load_all(dash_ig_context['monitorstorage']))[0]
        dash_ig_context['monitorstorage']['influxdb'] = yaml.dump(dash_ig_context['monitorstorage']['influxdb'])
        dash_ig_context['monitorstorage']['grafana'] = yaml.dump(dash_ig_context['monitorstorage']['grafana'])
        render_template("influxdb-grafana-controller.yaml", dash_ig_context)
        render_template("influxdb-service.yaml", dash_context)
        render_template("grafana-service.yaml", dash_context)
        render_template("heapster-rbac.yaml", dash_context)
        render_template("heapster-controller.yaml", dash_context)
        render_template("heapster-service.yaml", dash_context)
        rendered = True
    if get_snap_config("enable-gpu", required=False) == "true":
        render_template("nvidia-device-plugin.yml", context)
        rendered = True
    if get_snap_config("enable-metrics", required=False) == "true":
        render_template("auth-delegator.yaml", context)
        render_template("auth-reader.yaml", context)
        render_template("metrics-apiservice.yaml", context)
        render_template("metrics-server-deployment.yaml", context)
        render_template("metrics-server-service.yaml", context)
        render_template("resource-reader.yaml", context)
        kube_state_templates = ["cluster-role-binding", "cluster-role", "deployment",
                                "service-account", "service"]
        for t in kube_state_templates:
            render_template("kube-state-metrics-{}.yaml".format(t), context)
        rendered = True
    if get_snap_config("enable-ceph", required=False) == "true":
        ceph_context = context.copy()
        default_storage = get_snap_config("default-storage", required=True)
        ceph_context['admin_key'] = get_snap_config(
            "ceph-admin-key", required=True)
        ceph_context['kubernetes_key'] = get_snap_config(
            "ceph-kubernetes-key", required=True)
        ceph_context['mon_hosts'] = get_snap_config(
            "ceph-mon-hosts", required=True)

        render_template("ceph-secret.yaml", ceph_context)
        render_template("csi-rbdplugin.yaml", ceph_context)
        render_template("csi-rbdplugin-provisioner.yaml", ceph_context)
        render_template("csi-rbdplugin-attacher.yaml", ceph_context)

        ext4_context = ceph_context.copy()
        if default_storage == 'ceph-ext4':
            ext4_context['default'] = True
        else:
            ext4_context['default'] = False
        ext4_context['pool_name'] = 'ext4-pool'
        ext4_context['fs_type'] = 'ext4'
        ext4_context['sc_name'] = 'ceph-ext4'
        render_template("ceph-storageclass.yaml", ext4_context,
                        render_filename="ceph-ext4-storageclass.yaml")

        xfs_context = ceph_context.copy()
        if (default_storage == 'ceph-xfs' or
                default_storage == 'auto'):
            xfs_context['default'] = True
        else:
            xfs_context['default'] = False
        xfs_context['pool_name'] = 'xfs-pool'
        xfs_context['fs_type'] = 'xfs'
        xfs_context['sc_name'] = 'ceph-xfs'
        render_template("ceph-storageclass.yaml", xfs_context,
                        render_filename="ceph-xfs-storageclass.yaml")
        # RBAC
        render_template("csi-attacher-rbac.yaml", ceph_context)
        render_template("csi-nodeplugin-rbac.yaml", ceph_context)
        render_template("csi-provisioner-rbac.yaml", ceph_context)

        if get_snap_config("enable-cephfs", required=False) == "true":
            cephfs_context = ceph_context.copy()
            cephfs_context['default'] = (default_storage == 'cephfs')
            render_template("cephfs/secret.yaml", cephfs_context)
            render_template("cephfs/csi-cephfsplugin.yaml", cephfs_context)
            render_template("cephfs/csi-cephfsplugin-provisioner.yaml", cephfs_context)
            render_template("cephfs/csi-cephfsplugin-attacher.yaml", cephfs_context)
            render_template("cephfs/storageclass.yaml", cephfs_context)
            render_template("cephfs/csi-attacher-rbac.yaml", cephfs_context)
            render_template("cephfs/csi-nodeplugin-rbac.yaml", cephfs_context)
            render_template("cephfs/csi-provisioner-rbac.yaml", cephfs_context)
        rendered = True
    if get_snap_config("enable-keystone", required=False) == "true":
        keystone_context = context.copy()
        cert = get_snap_config("keystone-cert-file", required=True)
        with open(cert, "rb") as image_file:
            keystone_context['keystone_cert_file'] = \
                base64.b64encode(image_file.read()).decode('utf-8')
        key = get_snap_config("keystone-key-file", required=True)
        with open(key, "rb") as image_file:
            keystone_context['keystone_key_file'] = \
                base64.b64encode(image_file.read()).decode('utf-8')
        keystone_context['keystone_server_url'] = get_snap_config(
            "keystone-server-url", required=True)
        keystone_context['keystone_server_ca'] = get_snap_config(
            "keystone-server-ca", required=False).replace('\n', '')

        render_template("keystone-auth-certs-secret.yaml", keystone_context)
        render_template("keystone-deployment.yaml", keystone_context)
        render_template("keystone-service.yaml", keystone_context)
        render_template("keystone-rbac.yaml", keystone_context)
        rendered = True
    if get_snap_config("enable-openstack", required=False) == "true":
        openstack_context = context.copy()
        openstack_context.update({
            "cloud_conf": get_snap_config("openstack-cloud-conf", required=True),
            "endpoint_ca_cert": get_snap_config("openstack-endpoint-ca", required=False),
        })

        render_template("cloud-controller-manager-roles.yaml", openstack_context)
        render_template("cloud-controller-manager-role-bindings.yaml", openstack_context)
        render_template("openstack-cloud-controller-manager-ds.yaml", openstack_context)
        render_template("cloud-config-secret.yaml", openstack_context)

        render_template("cinder-csi-controllerplugin-rbac.yaml", openstack_context)
        render_template("cinder-csi-controllerplugin.yaml", openstack_context)
        render_template("cinder-csi-nodeplugin-rbac.yaml", openstack_context)
        render_template("cinder-csi-nodeplugin.yaml", openstack_context)
        render_template("storageclass-openstack.yaml", openstack_context)
        rendered = True
    if get_snap_config("enable-aws", required=False) == "true":
        render_template("storageclass-aws.yaml", context)
        rendered = True
    if get_snap_config("enable-azure", required=False) == "true":
        render_template("storageclass-azure.yaml", context)
        rendered = True
    if get_snap_config("enable-gcp", required=False) == "true":
        render_template("storageclass-gce.yaml", context)
        rendered = True

    return rendered

def render_template(file, context, required=True, render_filename=None):
    source = os.path.join(template_dir, file)
    if render_filename is None:
        dest = os.path.join(addon_dir, file)
    else:
        dest = os.path.join(addon_dir, render_filename)
    if not os.path.exists(source) and not required:
        return
    # allow for sub-dirs
    Path(dest).parent.mkdir(parents=True, exist_ok=True)
    with open(source) as f:
        template = Template(f.read())
    content = template.render(context)

    def _add_labels(part):
        part["metadata"].setdefault("labels", {})
        part["metadata"]["labels"]["cdk-addons"] = "true"
        if part["kind"] in ["Deployment", "DaemonSet", "StatefulSet"]:
            part["metadata"]["labels"]["cdk-restart-on-ca-change"] = "true"

    # apply cdk-addons=true label
    data = [part for part in yaml.load_all(content) if part]
    for part in data:
        if part['kind'] == 'List':
            # some files use kind:List rather than a set of YAML parts
            for item in part['items']:
                _add_labels(item)
        else:
            _add_labels(part)
    content = yaml.dump_all(data)

    with open(dest, "w") as f:
        f.write(content)

def apply_addons():
    # Apply dns service first and then recursively the rest.
    dns_provider = get_snap_config("dns-provider")
    if dns_provider in dns_providers:
        dns_svc = os.path.join(addon_dir, dns_providers[dns_provider])
        args = ["apply",
                "-f", dns_svc,
                "-l", "cdk-addons=true",
                "--force"]
        kubectl(*args)
    args = ["apply",
            "-f", addon_dir,
            "--recursive",
            "-l", "cdk-addons=true",
            "--force"]
    kubectl(*args)

def prune_addons():
    ''' Deletes addons that have the cdk-addons=true label, but do not exist in
    the template dir.

    We used to use kubectl apply --prune for this. Now we don't, because
    kubectl apply --prune is very, very disappointing.

    1. It does not prune at all if you have no templates
    2. It does not prune namespaces that you aren't applying templates to
    3. It does not prune unnamespaced resources at all (ClusterRole, etc)

    Instead of using that, we just have to do it ourselves.
    '''
    current_addons = set()

    def _include_addon(part):
        kind = part['kind']
        # If no namespace is specified, it's either an unnamespaced
        # resource, or a namespaced resource that will end up in
        # 'default'. We can delete both in the same way so we may
        # as well put them in the same bucket.
        namespace = part['metadata'].get('namespace', 'default')
        name = part['metadata']['name']
        current_addons.add((kind, namespace, name))

    for root, _, filenames in os.walk(addon_dir):
        for filename in filenames:
            path = os.path.join(root, filename)
            with open(path) as f:
                data = yaml.load_all(f)
                for part in data:
                    kind = part['kind']
                    if kind == 'List':
                        # yaml is a single kind:List instead of joined yaml parts
                        for item in part['items']:
                            _include_addon(item)
                    else:
                        # yaml is a set of joined parts
                        _include_addon(part)

    output = kubectl(
        'get',
        '-o', 'json',
        '-l', 'cdk-addons=true',
        '--all-namespaces',
        ','.join([
            'apiservices',
            'clusterroles',
            'clusterrolebindings',
            'configmaps',
            'daemonsets',
            'deployments',
            'pods',
            'roles',
            'rolebindings',
            'secrets',
            'services',
            'serviceaccounts',
            'statefulsets'
        ])
    )
    data = json.loads(output)

    for item in data['items']:
        kind = item['kind']
        metadata = item['metadata']
        # Depending on k8s version, unnamespaced resources can be returned as
        # None or "".
        namespace = metadata.get('namespace') or 'default'
        name = metadata['name']

        # skip if it's a current addon
        if (kind, namespace, name) in current_addons:
            continue

        # it has our label but isn't a current addon, delete it!
        print('Deleting %s %s/%s' % (kind, namespace, name))
        args = ['delete', '--wait=false', kind, name, '-n', namespace]
        try:
            kubectl(*args)
        except subprocess.CalledProcessError:
            traceback.print_exc()

def kubectl(*args):
    cmd = [os.path.join(os.environ["SNAP"], "kubectl")]
    kubeconfig = get_snap_config("kubeconfig", required=False)
    if kubeconfig:
        cmd += ["--kubeconfig", kubeconfig]
    cmd += list(args)
    return subprocess.check_output(cmd).decode('utf-8')

def get_node_count():
    '''Return the number of Kubernetes nodes in the cluster'''
    output = kubectl("get", "nodes", "-o", "name")
    node_count = len(output.splitlines())
    return node_count

def get_snap_config(name, required=True):
    path = os.path.join(os.environ["SNAP_DATA"], "config", name)
    with open(path) as f:
        value = f.read().rstrip()
    if not value and required:
        raise MissingSnapConfig("%s is required" % name)
    return value

class MissingSnapConfig(Exception):
    pass

if __name__ == "__main__":
    main()
